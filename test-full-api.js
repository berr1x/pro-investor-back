const axios = require('axios');

const BASE_URL = 'http://localhost:5000/api';

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testUser = {
  email: 'test@example.com',
  password: 'TestPass123',
  firstName: '–¢–µ—Å—Ç',
  lastName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
  middleName: '–¢–µ—Å—Ç–æ–≤–∏—á'
};

let authToken = '';

async function testFullAPI() {
  console.log('üß™ –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API Pro-Investor...\n');

  try {
    // 1. –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    console.log('1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
    try {
      const loginResponse = await axios.post(`${BASE_URL}/auth/login`, {
        email: testUser.email,
        password: testUser.password
      });
      console.log('‚úÖ –í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω');
      authToken = loginResponse.data.token;
    } catch (error) {
      if (error.response?.status === 401) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
        const registerResponse = await axios.post(`${BASE_URL}/auth/register`, testUser);
        console.log('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
        authToken = registerResponse.data.token;
      } else {
        throw error;
      }
    }

    const headers = { Authorization: `Bearer ${authToken}` };

    // 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    console.log('\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è...');
    try {
      const profileResponse = await axios.get(`${BASE_URL}/profile`, { headers });
      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è:', profileResponse.data.user.firstName);
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error.response?.data?.message);
    }

    // 3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    console.log('\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è...');
    try {
      const updateResponse = await axios.put(`${BASE_URL}/profile`, {
        phone: '+7 (999) 123-45-67'
      }, { headers });
      console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω:', updateResponse.data.message);
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error.response?.data?.message);
    }

    // 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    console.log('\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    try {
      const passportResponse = await axios.put(`${BASE_URL}/profile/passport`, {
        series: '1234',
        number: '567890',
        issuedBy: '–û–£–§–ú–° –†–æ—Å—Å–∏–∏ –ø–æ –≥. –ú–æ—Å–∫–≤–µ',
        issueDate: '2020-01-15',
        departmentCode: '123456',
        gender: 'male',
        birthDate: '1990-05-20'
      }, { headers });
      console.log('‚úÖ –ü–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error.response?.data?.message);
    }

    // 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—á–µ—Ç–æ–≤
    console.log('\n5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—á–µ—Ç–æ–≤...');
    try {
      const accountsResponse = await axios.get(`${BASE_URL}/accounts`, { headers });
      console.log('‚úÖ –°—á–µ—Ç–∞ –ø–æ–ª—É—á–µ–Ω—ã:', accountsResponse.data.accounts.length, '—Å—á–µ—Ç–æ–≤');
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—á–µ—Ç–æ–≤:', error.response?.data?.message);
    }

    // 6. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—á–µ—Ç–æ–≤
    console.log('\n6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—á–µ—Ç–æ–≤...');
    try {
      const statsResponse = await axios.get(`${BASE_URL}/accounts/stats`, { headers });
      console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:');
      console.log(`   –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${statsResponse.data.totalBalance} RUB`);
      console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—á–µ—Ç–æ–≤: ${statsResponse.data.accountsCount}`);
      console.log(`   –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: ${statsResponse.data.profitability.annual}% –≥–æ–¥–æ–≤—ã—Ö`);
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.response?.data?.message);
    }

    // 7. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
    console.log('\n7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ...');
    try {
      const depositResponse = await axios.post(`${BASE_URL}/operations/deposit`, {
        amount: 50000,
        comment: '–¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ',
        contactMethod: 'email'
      }, { headers });
      console.log('‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∞:', depositResponse.data.operation.id);
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ:', error.response?.data?.message);
    }

    // 8. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥
    console.log('\n8. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥...');
    try {
      const withdrawalResponse = await axios.post(`${BASE_URL}/operations/withdrawal`, {
        amount: 10000,
        recipientDetails: {
          bankName: '–°–±–µ—Ä–±–∞–Ω–∫',
          accountNumber: '40817810123456789012',
          bik: '044525225'
        },
        comment: '–¢–µ—Å—Ç–æ–≤—ã–π –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤'
      }, { headers });
      console.log('‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞:', withdrawalResponse.data.operation.id);
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥:', error.response?.data?.message);
    }

    // 9. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
    console.log('\n9. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π...');
    try {
      const operationsResponse = await axios.get(`${BASE_URL}/operations`, { headers });
      console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–ª—É—á–µ–Ω–∞:', operationsResponse.data.operations.length, '–æ–ø–µ—Ä–∞—Ü–∏–π');
      console.log(`   –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: ${operationsResponse.data.pagination.pages}`);
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π:', error.response?.data?.message);
    }

    // 10. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    console.log('\n10. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏...');
    try {
      const invalidDepositResponse = await axios.post(`${BASE_URL}/operations/deposit`, {
        amount: 100, // —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∞—è —Å—É–º–º–∞
        comment: '–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏'
      }, { headers });
      console.log('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞!');
    } catch (error) {
      if (error.response?.status === 400) {
        console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      } else {
        console.log('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', error.response?.data?.message);
      }
    }

    console.log('\nüéâ –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ API endpoints:');
    console.log('   POST /api/auth/register - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è');
    console.log('   POST /api/auth/login - –í—Ö–æ–¥');
    console.log('   GET /api/auth/verify - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞');
    console.log('   GET /api/profile - –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è');
    console.log('   PUT /api/profile - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è');
    console.log('   PUT /api/profile/passport - –ü–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
    console.log('   GET /api/accounts - –°—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    console.log('   GET /api/accounts/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—á–µ—Ç–æ–≤');
    console.log('   POST /api/operations/deposit - –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ');
    console.log('   POST /api/operations/withdrawal - –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥');
    console.log('   GET /api/operations - –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π');

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    if (error.response) {
      console.error('   –°—Ç–∞—Ç—É—Å:', error.response.status);
      console.error('   –î–∞–Ω–Ω—ã–µ:', error.response.data);
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testFullAPI();