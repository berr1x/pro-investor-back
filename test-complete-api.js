const axios = require('axios');

const BASE_URL = 'http://localhost:5000/api';

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testUser = {
  email: 'test@example.com',
  password: 'TestPass123',
  firstName: '–¢–µ—Å—Ç',
  lastName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
  middleName: '–¢–µ—Å—Ç–æ–≤–∏—á'
};

let authToken = '';

async function testCompleteAPI() {
  console.log('üöÄ –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API Pro-Investor (–≤–∫–ª—é—á–∞—è –∞–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏)...\n');

  try {
    // 1. –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    console.log('1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
    try {
      const loginResponse = await axios.post(`${BASE_URL}/auth/login`, {
        email: testUser.email,
        password: testUser.password
      });
      console.log('‚úÖ –í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω');
      authToken = loginResponse.data.token;
    } catch (error) {
      if (error.response?.status === 401) {
        const registerResponse = await axios.post(`${BASE_URL}/auth/register`, testUser);
        console.log('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
        authToken = registerResponse.data.token;
      } else {
        throw error;
      }
    }

    const headers = { Authorization: `Bearer ${authToken}` };

    // 2. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
    console.log('\n2. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ...');
    let operationId;
    try {
      const depositResponse = await axios.post(`${BASE_URL}/operations/deposit`, {
        amount: 100000,
        comment: '–¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤',
        contactMethod: 'email'
      }, { headers });
      operationId = depositResponse.data.operation.id;
      console.log('‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∞:', operationId);
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏:', error.response?.data?.message);
    }

    // 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã)
    console.log('\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π...');
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    try {
      const allOpsResponse = await axios.get(`${BASE_URL}/admin/operations`, { headers });
      console.log('‚úÖ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã:', allOpsResponse.data.operations.length, '–æ–ø–µ—Ä–∞—Ü–∏–π');
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:', error.response?.data?.message);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    try {
      const statsResponse = await axios.get(`${BASE_URL}/admin/stats`, { headers });
      console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:');
      console.log(`   –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: ${statsResponse.data.operations.total_operations}`);
      console.log(`   –û–∂–∏–¥–∞—é—â–∏—Ö: ${statsResponse.data.operations.pending_operations}`);
      console.log(`   –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: ${statsResponse.data.operations.completed_operations}`);
      console.log(`   –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${statsResponse.data.users.total_users}`);
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.response?.data?.message);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    try {
      const usersResponse = await axios.get(`${BASE_URL}/admin/users`, { headers });
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã:', usersResponse.data.users.length, '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error.response?.data?.message);
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—è)
    if (operationId) {
      console.log('\n4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏...');
      try {
        const statusResponse = await axios.put(`${BASE_URL}/admin/operations/${operationId}/status`, {
          status: 'processing',
          adminComment: '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'
        }, { headers });
        console.log('‚úÖ –°—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ "processing"');
      } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error.response?.data?.message);
      }

      // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
      try {
        const completeResponse = await axios.put(`${BASE_URL}/admin/operations/${operationId}/status`, {
          status: 'completed',
          adminComment: '–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'
        }, { headers });
        console.log('‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏:', error.response?.data?.message);
      }
    }

    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
    console.log('\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞...');
    try {
      const accountsResponse = await axios.get(`${BASE_URL}/accounts/stats`, { headers });
      console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
      console.log(`   –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${accountsResponse.data.totalBalance} RUB`);
      console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π: ${accountsResponse.data.operations.total}`);
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—á–µ—Ç–æ–≤:', error.response?.data?.message);
    }

    console.log('\nüéâ –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('\nüìã –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ API endpoints:');
    console.log('\nüîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è:');
    console.log('   POST /api/auth/register - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è');
    console.log('   POST /api/auth/login - –í—Ö–æ–¥');
    console.log('   GET /api/auth/verify - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞');
    console.log('   POST /api/auth/logout - –í—ã—Ö–æ–¥');
    
    console.log('\nüë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
    console.log('   GET /api/profile - –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è');
    console.log('   PUT /api/profile - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è');
    console.log('   PUT /api/profile/passport - –ü–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
    console.log('   POST /api/profile/documents - –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞');
    console.log('   GET /api/profile/documents - –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤');
    console.log('   DELETE /api/profile/documents/:id - –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞');
    
    console.log('\nüí∞ –°—á–µ—Ç–∞:');
    console.log('   GET /api/accounts - –°—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    console.log('   GET /api/accounts/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—á–µ—Ç–æ–≤');
    console.log('   POST /api/accounts - –°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞');
    console.log('   GET /api/accounts/:id - –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å—á–µ—Ç');
    
    console.log('\nüí∏ –û–ø–µ—Ä–∞—Ü–∏–∏:');
    console.log('   POST /api/operations/deposit - –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ');
    console.log('   POST /api/operations/withdrawal - –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥');
    console.log('   GET /api/operations - –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π');
    console.log('   GET /api/operations/:id - –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è');
    
    console.log('\nüë®‚Äçüíº –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:');
    console.log('   GET /api/admin/operations - –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏');
    console.log('   PUT /api/admin/operations/:id/status - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞');
    console.log('   GET /api/admin/stats - –ê–¥–º–∏–Ω—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞');
    console.log('   GET /api/admin/users - –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏');
    console.log('   PUT /api/admin/users/:id/status - –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    if (error.response) {
      console.error('   –°—Ç–∞—Ç—É—Å:', error.response.status);
      console.error('   –î–∞–Ω–Ω—ã–µ:', error.response.data);
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testCompleteAPI();