const axios = require('axios');

const BASE_URL = 'http://localhost:5000/api';

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testUser = {
  email: 'test@example.com',
  password: 'TestPass123',
  firstName: '–¢–µ—Å—Ç',
  lastName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
  middleName: '–¢–µ—Å—Ç–æ–≤–∏—á'
};

async function testAPI() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API Pro-Investor...\n');

  try {
    // –¢–µ—Å—Ç 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...');
    try {
      const registerResponse = await axios.post(`${BASE_URL}/auth/register`, testUser);
      console.log('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', registerResponse.data.message);
      console.log('   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', registerResponse.data.user);
      console.log('   –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω:', !!registerResponse.data.token);
    } catch (error) {
      if (error.response?.status === 400 && error.response.data.message.includes('already exists')) {
        console.log('‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...');
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error.response?.data || error.message);
      }
    }

    // –¢–µ—Å—Ç 2: –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
    console.log('\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–∞...');
    try {
      const loginResponse = await axios.post(`${BASE_URL}/auth/login`, {
        email: testUser.email,
        password: testUser.password
      });
      console.log('‚úÖ –í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω:', loginResponse.data.message);
      console.log('   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', loginResponse.data.user);
      console.log('   –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω:', !!loginResponse.data.token);
      
      const token = loginResponse.data.token;
      
      // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
      console.log('\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞...');
      try {
        const verifyResponse = await axios.get(`${BASE_URL}/auth/verify`, {
          headers: { Authorization: `Bearer ${token}` }
        });
        console.log('‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω:', verifyResponse.data.message);
        console.log('   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', verifyResponse.data.user);
      } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:', error.response?.data || error.message);
      }

      // –¢–µ—Å—Ç 4: –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
      console.log('\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–∞...');
      try {
        const logoutResponse = await axios.post(`${BASE_URL}/auth/logout`, {}, {
          headers: { Authorization: `Bearer ${token}` }
        });
        console.log('‚úÖ –í—ã—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω:', logoutResponse.data.message);
      } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error.response?.data || error.message);
      }

    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error.response?.data || error.message);
    }

    // –¢–µ—Å—Ç 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    console.log('\n5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏...');
    try {
      const invalidRegisterResponse = await axios.post(`${BASE_URL}/auth/register`, {
        email: 'invalid-email',
        password: '123', // —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ø–∞—Ä–æ–ª—å
        firstName: 'A', // —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è
        lastName: 'B' // —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è —Ñ–∞–º–∏–ª–∏—è
      });
      console.log('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞ - —ç—Ç–æ –æ—à–∏–±–∫–∞!');
    } catch (error) {
      if (error.response?.status === 400) {
        console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        console.log('   –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', error.response.data.errors?.length || 0);
      } else {
        console.log('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', error.response?.data || error.message);
      }
    }

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testAPI();